#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

struct Student {
    int id;
    string name;
    int age;
    string course;
};

struct Teacher {
    int id;
    string name;
    int age;
    string subject;
};

vector<Student> students;
map<int, Student> studentMap;
vector<Teacher> teachers;
map<int, Teacher> teacherMap;

void addStudent() {
    Student s;
    cout << "Enter Student ID: "; cin >> s.id;
    cout << "Enter Name: "; cin >> s.name;
    cout << "Enter Age: "; cin >> s.age;
    cout << "Enter Course: "; cin >> s.course;
    students.push_back(s);
    studentMap[s.id] = s;
    cout << "Student added successfully!\n";
}

void displayStudents() {
    cout << "\nStudent List:\n";
    for (const auto& s : students) {
        cout << "ID: " << s.id << ", Name: " << s.name << ", Age: " << s.age << ", Course: " << s.course << '\n';
    }
}

void searchStudent() {
    int id;
    cout << "Enter Student ID to search: "; cin >> id;
    if (studentMap.count(id)) {
        Student s = studentMap[id];
        cout << "ID: " << s.id << ", Name: " << s.name << ", Age: " << s.age << ", Course: " << s.course << '\n';
    } else {
        cout << "Student not found!\n";
    }
}

void updateStudent() {
    int id;
    cout << "Enter Student ID to update: "; cin >> id;
    if (studentMap.count(id)) {
        Student& s = studentMap[id];
        cout << "Enter New Name: "; cin >> s.name;
        cout << "Enter New Age: "; cin >> s.age;
        cout << "Enter New Course: "; cin >> s.course;
        cout << "Student updated successfully!\n";
    } else {
        cout << "Student not found!\n";
    }
}

void deleteStudent() {
    int id;
    cout << "Enter Student ID to delete: "; cin >> id;
    if (studentMap.count(id)) {
        students.erase(remove_if(students.begin(), students.end(), [id](Student s) { return s.id == id; }), students.end());
        studentMap.erase(id);
        cout << "Student deleted successfully!\n";
    } else {
        cout << "Student not found!\n";
    }
}

void addTeacher() {
    Teacher t;
    cout << "Enter Teacher ID: "; cin >> t.id;
    cout << "Enter Name: "; cin >> t.name;
    cout << "Enter Age: "; cin >> t.age;
    cout << "Enter Subject: "; cin >> t.subject;
    teachers.push_back(t);
    teacherMap[t.id] = t;
    cout << "Teacher added successfully!\n";
}

void displayTeachers() {
    cout << "\nTeacher List:\n";
    for (const auto& t : teachers) {
        cout << "ID: " << t.id << ", Name: " << t.name << ", Age: " << t.age << ", Subject: " << t.subject << '\n';
    }
}

void searchTeacher() {
    int id;
    cout << "Enter Teacher ID to search: "; cin >> id;
    if (teacherMap.count(id)) {
        Teacher t = teacherMap[id];
        cout << "ID: " << t.id << ", Name: " << t.name << ", Age: " << t.age << ", Subject: " << t.subject << '\n';
    } else {
        cout << "Teacher not found!\n";
    }
}

void deleteTeacher() {
    int id;
    cout << "Enter Teacher ID to delete: "; cin >> id;
    if (teacherMap.count(id)) {
        teachers.erase(remove_if(teachers.begin(), teachers.end(), [id](Teacher t) { return t.id == id; }), teachers.end());
        teacherMap.erase(id);
        cout << "Teacher deleted successfully!\n";
    } else {
        cout << "Teacher not found!\n";
    }
}

int main() {
    int choice;
    while (true) {
        cout << "\nManagement System\n";
        cout << "1. Add Student\n2. Display Students\n3. Search Student\n4. Update Student\n5. Delete Student\n6. Add Teacher\n7. Display Teachers\n8. Search Teacher\n9. Delete Teacher\n10. Exit\n";
        cout << "Choose an option: ";
        cin >> choice;
        switch (choice) {
            case 1: addStudent(); break;
            case 2: displayStudents(); break;
            case 3: searchStudent(); break;
            case 4: updateStudent(); break;
            case 5: deleteStudent(); break;
            case 6: addTeacher(); break;
            case 7: displayTeachers(); break;
            case 8: searchTeacher(); break;
            case 9: deleteTeacher(); break;
            case 10: return 0;
            default: cout << "Invalid choice!\n";
        }
    }
    return 0;
}
